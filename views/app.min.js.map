{"version":3,"sources":["main.js","contact/contact.controller.js","editPlaylist/editPlaylist.controller.js","home/home.controller.js","myPlaylists/myPlaylists.controller.js","playlist/playlist.controller.js","profile/profile.controller.js","topPlaylists/topPlaylists.controller.js","auth/login/login.controller.js","auth/logout/logout.controller.js","auth/register/register.controller.js","common/directives/fileModel.js","common/services/authentication.service.js","common/services/data.service.js","common/services/mulitpartForm.js","common/services/playlist.service.js","common/directives/foot/footer.controller.js","common/directives/foot/footer.directive.js","common/directives/navigation/navigation.controller.js","common/directives/navigation/navigation.directive.js","common/directives/player/player.constant.js","common/directives/player/player.controller.js","common/directives/player/player.directive.js","common/directives/topPlaylists/topPlaylists.directive.js","common/directives/topPlaylists/topPlaylistsTemplate.controller.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjrjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxnKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.min.js","sourcesContent":["(function () {\r\n\r\n    angular.module('meanApp', ['ngRoute', 'as.sortable']);\r\n\r\n    function config($routeProvider, $locationProvider) {\r\n        $routeProvider\r\n            .when('/', {\r\n                templateUrl: 'home/home.view.html',\r\n                controller: 'homeCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/register', {\r\n                templateUrl: '/auth/register/register.view.html',\r\n                controller: 'registerCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/login', {\r\n                templateUrl: '/auth/login/login.view.html',\r\n                controller: 'loginCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/profile/:id?', {\r\n                templateUrl: '/profile/profile.view.html',\r\n                controller: 'profileCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/contact', {\r\n                templateUrl: '/contact/contact.view.html',\r\n                controller: 'contactCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/topPlaylists', {\r\n                templateUrl: '/topPlaylists/topPlaylists.view.html',\r\n                controller: 'topPlaylistsCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/myPlaylists', {\r\n                templateUrl: '/myPlaylists/myPlaylists.view.html',\r\n                controller: 'myPlaylistsCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/logout', {\r\n                templateUrl: '/home/home.view.html',\r\n                controller: 'logoutCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/editPlaylist/:id', {\r\n                templateUrl: '/editPlaylist/editPlaylist.view.html',\r\n                controller: 'editPlaylistCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/playlist/:id', {\r\n                templateUrl: '/playlist/playlist.view.html',\r\n                controller: 'playlistCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .otherwise({redirectTo: '/'});\r\n\r\n        // use the HTML5 History API\r\n        $locationProvider.html5Mode(true);\r\n    }\r\n\r\n    function run($rootScope, $location, authentication) {\r\n        $rootScope.$on('$routeChangeStart', function (event, nextRoute, currentRoute) {\r\n            if ($location.path() === '/profile' && !authentication.isLoggedIn()) {\r\n                $location.path('/login');\r\n            }\r\n            if ($location.path() === '/myPlaylists' && !authentication.isLoggedIn()) {\r\n                $location.path('/login');\r\n            }\r\n            if ($location.path() === '/editPlaylist' && !authentication.isLoggedIn()) {\r\n                $location.path('/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .config(['$routeProvider', '$locationProvider', config])\r\n        .run(['$rootScope', '$location', 'authentication', run]);\r\n\r\n})();","(function() {\r\n    angular\r\n        .module('meanApp')\r\n        .controller('contactCtrl', contactCtrl);\r\n\r\n    function contactCtrl () {\r\n\r\n    }\r\n\r\n})();","(function () {\r\n    angular\r\n        .module('meanApp')\r\n        .controller('editPlaylistCtrl', editPlaylistCtrl);\r\n\r\n    editPlaylistCtrl.$inject = ['$location', 'authentication', 'meanData', '$routeParams'];\r\n    function editPlaylistCtrl($location, authentication, meanData, $routeParams) {\r\n        vm = this;\r\n        var id = parseInt($routeParams.id);\r\n\r\n        //If the playlist can be accessed\r\n        var playlistRetrieved = function () {\r\n            vm.tempPlaylist = copyPlaylist(vm.playlist);\r\n            vm.link = \"\";\r\n            vm.title = \"\";\r\n            vm.research = \"\";\r\n            vm.YoutubeResults = [];\r\n            vm.SoundcloudResult = [];\r\n            vm.songListModified = false;\r\n\r\n            if (vm.playlist == {}) {\r\n                alert(\"no playlist to edit\");\r\n                $location.path('home');\r\n            }\r\n            if (authentication.currentUser()._id != vm.playlist.UserID) {\r\n                alert(\"This is not the playlist you are looking for :)\");\r\n                $location.path('home');\r\n            }\r\n\r\n            vm.editMode = false;\r\n            vm.saveEdit = function () {\r\n                console.log(\"Saving modifications\");\r\n                if (vm.playlist.Name != vm.tempPlaylist.Name ||\r\n                    vm.playlist.Description != vm.tempPlaylist.Description ||\r\n                    vm.playlist.IsPublic != vm.tempPlaylist.IsPublic ||\r\n                    vm.songListModified) {\r\n                    resetRanks();\r\n                    vm.tempPlaylist.JsonPlaylist = angular.toJson(vm.tempPlaylist.JsonPlaylist);\r\n                    meanData.editPlaylist(vm.tempPlaylist)\r\n                        .error(function (err) {\r\n                            alert(\"error while updating playlist\" + err);\r\n                        })\r\n                        .then(function (data) {\r\n                            vm.playlist = copyPlaylist(data.data);\r\n                            vm.tempPlaylist.JsonPlaylist = JSON.parse(vm.tempPlaylist.JsonPlaylist);\r\n                            vm.songListModified = false;\r\n                        })\r\n                }\r\n                vm.editMode = false;\r\n            };\r\n\r\n            vm.cancelEdit = function () {\r\n                vm.editMode = false;\r\n                var temp = vm.tempPlaylist.JsonPlaylist;\r\n                vm.tempPlaylist = copyPlaylist(vm.playlist);\r\n                vm.tempPlaylist.JsonPlaylist = temp; //TODO Adapt\r\n            };\r\n\r\n            vm.delete = function () {\r\n                console.log('delete playlist');\r\n                var result = confirm(\"Do you really want to delete this playlist?\");\r\n                if (result) {\r\n                    meanData.deletePlaylist(vm.playlist)\r\n                        .error(function (err) {\r\n                            alert(\"error while deleting playlist\", err);\r\n                        })\r\n                        .then(function (data) {\r\n                            $location.path('/myPlaylists');\r\n                        })\r\n                }\r\n            };\r\n\r\n            vm.addSong = function () {\r\n                vm.songListModified = true;\r\n                var newSong = {\r\n                    title: vm.title,\r\n                    link: vm.link,\r\n                    rank: vm.tempPlaylist.JsonPlaylist.songs.length\r\n                };\r\n                vm.tempPlaylist.JsonPlaylist.songs.push(newSong);\r\n                vm.title = \"\";\r\n                vm.link = \"\";\r\n            };\r\n\r\n            vm.addYoutube = function(result){\r\n                vm.songListModified = true;\r\n                var newSong = {\r\n                    from : \"Youtube\",\r\n                    title : result.snippet.title,\r\n                    id: result.id.videoId,\r\n                    link: \"https://www.youtube.com/watch?v=\"+result.id.videoId,\r\n                    rank: vm.tempPlaylist.JsonPlaylist.songs.length\r\n                }\r\n                vm.tempPlaylist.JsonPlaylist.songs.push(newSong);\r\n            };\r\n\r\n            vm.searchSong = function(){\r\n              meanData.getYoutubeResults(vm.research)\r\n                  .error(function (error) {\r\n                      console.log(error)\r\n                  })\r\n                  .then(function(data){\r\n                      console.log(data.data);\r\n                      vm.YoutubeResults = data.data.items;\r\n                  })\r\n            };\r\n\r\n            vm.removeSong = function (song) {\r\n                vm.songListModified = true;\r\n                var index = vm.tempPlaylist.JsonPlaylist.songs.indexOf(song);\r\n                if(index != -1){\r\n                    vm.tempPlaylist.JsonPlaylist.songs.splice(index, 1);\r\n                }\r\n            };\r\n\r\n            vm.dragControlListeners = {\r\n                accept: function (sourceItemHandleScope, destSortableScope) {return true},//override to determine\r\n                // drag is allowed or not. default is true.\r\n                itemMoved: function (event) {},//Does nothing,\r\n                orderChanged: function (event) {vm.songListModified = true;},//Do what you want},\r\n                longTouch: true\r\n            };\r\n\r\n        };\r\n\r\n        var copyPlaylist = function (playlist) {\r\n            return {\r\n                ID: playlist.ID,\r\n                UserID: playlist.UserID,\r\n                IsPublic: playlist.IsPublic,\r\n                Name: playlist.Name,\r\n                Description: playlist.Description,\r\n                JsonPlaylist: playlist.JsonPlaylist || {\"songs\": []}\r\n            };\r\n        };\r\n        //Real entry point of the controller\r\n        vm.playlist = {};\r\n        meanData.getPlaylist(id)\r\n            .error(function (error) {\r\n                alert(error.message);\r\n                $location.path(\"myPlaylists\");\r\n            })\r\n            .then(function (data) {\r\n                vm.playlist = data.data;\r\n                playlistRetrieved();\r\n            });\r\n\r\n\r\n        vm.indexOfSong = function(song){\r\n            return vm.tempPlaylist.JsonPlaylist.songs.indexOf(song);\r\n        };\r\n\r\n        function resetRanks(){\r\n            for(var i = 0; i<vm.tempPlaylist.JsonPlaylist.songs.length ; i++ ){\r\n                vm.tempPlaylist.JsonPlaylist.songs[i].rank = i;\r\n            }\r\n        }\r\n    }\r\n})();","(function() {\r\n  \r\n  angular\r\n    .module('meanApp')\r\n    .controller('homeCtrl', homeCtrl);\r\n\r\n    function homeCtrl () {\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('myPlaylistsCtrl', myPlaylistsCtrl);\r\n\r\n    myPlaylistsCtrl.$inject = ['$location', 'meanData', 'playlistService'];\r\n    function myPlaylistsCtrl($location, meanData, playlistService) {\r\n        var vm = this;\r\n\r\n        vm.playlists = [];\r\n        vm.likes = [];\r\n        vm.newPlaylist = {\r\n            name: \"\",\r\n            description: \"\",\r\n            isPublic: true\r\n        };\r\n\r\n        meanData.getMyPlaylists()\r\n            .error(function (error) {\r\n                console.error(error);\r\n            })\r\n            .then(function (data) {\r\n                vm.playlists = data.data;\r\n                meanData.getLikedPlaylists()\r\n                    .error(function (error) {\r\n                        console.error(error);\r\n                    })\r\n                    .then(function (data) {\r\n                        vm.likes = data.data;\r\n                        vm.playlists.forEach(function (itemPlaylist) {\r\n                            vm.likes.forEach(function (itemLike) {\r\n                                if (itemPlaylist.ID == itemLike.PlaylistID) {\r\n                                    itemPlaylist.liked = true;\r\n                                }\r\n                            })\r\n                        })\r\n                    })\r\n            });\r\n\r\n\r\n\r\n        vm.addPlaylist = function () {\r\n            console.log(\"creating playlist. Name : \", vm.newPlaylist.name);\r\n            meanData.createPlaylist(vm.newPlaylist)\r\n                .error(function (err) {\r\n                    alert(\"Error while adding playlist\", err);\r\n                })\r\n                .then(function (data) {\r\n                    vm.playlists.push(data.data);\r\n                    vm.newPlaylist.name = \"\";\r\n                    vm.newPlaylist.description = \"\";\r\n                });\r\n        };\r\n\r\n        vm.edit = function (playlist) {\r\n            $location.path('editPlaylist/' + playlist.ID);\r\n        };\r\n\r\n        vm.play = function (playlist) {\r\n            console.log(\"Play\", playlist); //TODO\r\n            playlistService.setPlaylist(playlist);\r\n        };\r\n\r\n        vm.toggleLike = function (playlist) {\r\n            if(playlist.liked){\r\n                meanData.unlikePlaylist(playlist.ID)\r\n                    .error(function (error) {\r\n                        console.log(error);\r\n                    })\r\n                    .then(function (data) {\r\n                        var index = vm.likes.indexOf(playlist.ID);\r\n                        if(index != -1){\r\n                            vm.likes.splice(index, 1);\r\n                        }\r\n                        vm.playlists.forEach(function (item) {\r\n                            if (item.ID == playlist.ID) {\r\n                                item.likeCount--;\r\n                                item.liked = false;\r\n                            }\r\n                        })\r\n                    });\r\n            }\r\n            else{\r\n                meanData.likePlaylist(playlist.ID)\r\n                    .error(function (error) {\r\n                        console.log(error);\r\n                    })\r\n                    .then(function (data) {\r\n                        vm.likes.push(playlist.ID);\r\n                        vm.playlists.forEach(function (item) {\r\n                            if (item.ID == playlist.ID) {\r\n                                item.likeCount++;\r\n                                item.liked = true;\r\n                            }\r\n                        })\r\n                    });\r\n            }\r\n        };\r\n    }\r\n\r\n})();","(function () {\r\n    angular\r\n        .module('meanApp')\r\n        .controller('playlistCtrl', playlistCtrl);\r\n\r\n    playlistCtrl.$inject = ['$location', 'meanData', 'authentication', '$routeParams'];\r\n    function playlistCtrl($location, meanData, authentication, $routeParams) {\r\n        vm = this;\r\n        var id = parseInt($routeParams.id);\r\n\r\n        //If the playlist can be accessed\r\n        var playlistRetrieved = function () {\r\n            if (vm.playlist == {}) {\r\n                alert(\"no playlist at this id\");\r\n                $location.path('home');\r\n            }\r\n            //Get profile\r\n            meanData.getProfile(vm.playlist.UserID)\r\n                .error(function (error) {\r\n                    console.error(\"Error while retrieving user\", error)\r\n                })\r\n                .then(function (data) {\r\n                    vm.profile = data.data;\r\n                });\r\n\r\n            //Get playlist comments\r\n            meanData.getComments(vm.playlist.ID)\r\n                .error(function (error) {\r\n                    console.error(\"Error while retrieving comments\", error)\r\n                })\r\n                .then(function (data) {\r\n                    vm.comments = data.data;\r\n                });\r\n\r\n            //Get playlist likes\r\n            meanData.getPlaylistLikes(vm.playlist.ID)\r\n                .error(function (error) {\r\n                    console.error(error);\r\n                })\r\n                .then(function (data) {\r\n                    var likes = data.data;\r\n                    vm.playlist.likeCount = likes.length;\r\n                    vm.playlist.liked = false;\r\n                    for (var i = 0; i < likes.length; i++) {\r\n                        if (likes[i].UserID == vm.user._id) {\r\n                            vm.playlist.liked = true;\r\n                            break;\r\n                        }\r\n                    }\r\n                })\r\n\r\n        };\r\n\r\n        vm.play = function () {\r\n            //TODO\r\n            console.log(\"play playlist\");\r\n        };\r\n\r\n        vm.addComment = function () {\r\n            if (vm.newComment != \"\") {\r\n                meanData.commentPlaylist(vm.playlist.ID, vm.newComment)\r\n                    .error(function (error) {\r\n                        alert(\"Error while adding comment, try again later\")\r\n                    })\r\n                    .then(function (result) {\r\n                        result.data.Name = vm.user.name;\r\n                        vm.comments.push(result.data);\r\n                        vm.newComment = \"\";\r\n                    });\r\n            }\r\n        };\r\n\r\n        vm.toggleLike = function () {\r\n            if (vm.playlist.liked) {\r\n                meanData.unlikePlaylist(vm.playlist.ID)\r\n                    .error(function (error) {\r\n                        console.log(error);\r\n                    })\r\n                    .then(function (data) {\r\n                        vm.playlist.liked = false;\r\n                        vm.playlist.likeCount--;\r\n                    });\r\n            }\r\n            else {\r\n                meanData.likePlaylist(vm.playlist.ID)\r\n                    .error(function (error) {\r\n                        console.log(error);\r\n                    })\r\n                    .then(function (data) {\r\n                        vm.playlist.likeCount++;\r\n                        vm.playlist.liked = true;\r\n\r\n                    });\r\n            }\r\n        };\r\n\r\n        //Real entry point of the controller\r\n        vm.playlist = {};\r\n        vm.profile = {};\r\n        vm.comments = [];\r\n        vm.newComment = \"\";\r\n        vm.user = authentication.currentUser();\r\n        meanData.getPlaylist(id)\r\n            .error(function (error) {\r\n                alert(error.message);\r\n                $location.path(\"myPlaylists\");\r\n            })\r\n            .then(function (data) {\r\n                vm.playlist = data.data;\r\n                playlistRetrieved();\r\n            });\r\n    }\r\n})();\r\n","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('profileCtrl', profileCtrl);\r\n\r\n    profileCtrl.$inject = ['meanData', 'authentication', '$routeParams'];\r\n    function profileCtrl(meanData, authentication, $routeParams) {\r\n        var vm = this;\r\n        var id;\r\n        var currentUserID = authentication.currentUser()._id;\r\n        var userID = parseInt($routeParams.id);\r\n        if(!$routeParams.id){\r\n            id = currentUserID\r\n        }else{\r\n            id = userID;\r\n        }\r\n        vm.personalProfile = (currentUserID == id);\r\n        vm.user = {};\r\n        meanData.getProfile(id)\r\n            .success(function (data) {\r\n                vm.user = data;\r\n            })\r\n            .error(function (e) {\r\n                console.log(e);\r\n            });\r\n\r\n        vm.likedPlaylists = [];\r\n        vm.publicPlaylists = [];\r\n\r\n\r\n        if(vm.personalProfile){\r\n            meanData.getLikedPlaylists()\r\n                .error(function (error) {\r\n                    console.error(error);\r\n                })\r\n                .then(function (data){\r\n                    vm.likedPlaylists = data.data;\r\n                })\r\n        } else{\r\n            meanData.getUserPlaylists(id)\r\n                .error(function (error){\r\n                    console.error(error)\r\n                })\r\n                .then(function (data){\r\n                    vm.publicPlaylists = data.data;\r\n                })\r\n        }\r\n    }\r\n\r\n})();\r\n","(function() {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('topPlaylistsCtrl', topPlaylistsCtrl);\r\n\r\n    function topPlaylistsCtrl () {\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n  angular\r\n  .module('meanApp')\r\n  .controller('loginCtrl', loginCtrl);\r\n\r\n  loginCtrl.$inject = ['$location', 'authentication'];\r\n  function loginCtrl($location, authentication) {\r\n    var vm = this;\r\n\r\n    vm.credentials = {\r\n      email : \"\",\r\n      password : \"\"\r\n    };\r\n\r\n    vm.onSubmit = function () {\r\n      authentication\r\n        .login(vm.credentials)\r\n        .error(function(err){\r\n          alert(err);\r\n        })\r\n        .then(function(){\r\n          $location.path('profile');\r\n        });\r\n    };\r\n\r\n  }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('logoutCtrl', logoutCtrl);\r\n\r\n    logoutCtrl.$inject = ['$location', 'authentication'];\r\n    function logoutCtrl($location, authentication) {\r\n        var vm = this;\r\n\r\n        authentication.logout();\r\n        $location.path('/');\r\n    }\r\n\r\n})();","(function () {\r\n\r\n  angular\r\n    .module('meanApp')\r\n    .controller('registerCtrl', registerCtrl);\r\n\r\n  registerCtrl.$inject = ['$location', 'authentication'];\r\n  function registerCtrl($location, authentication) {\r\n    var vm = this;\r\n\r\n    vm.credentials = {\r\n      name : \"\",\r\n      email : \"\",\r\n      password : \"\"\r\n    };\r\n\r\n    vm.onSubmit = function () {\r\n      authentication.register(vm.credentials, function (response) {\r\n          if(response.status === 200){\r\n              $location.path('profile');\r\n          } else{\r\n              alert(err);\r\n          }\r\n      })\r\n    };\r\n  }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .directive('fileModel', ['$parse', function ($parse) {\r\n            return {\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs) {\r\n                    var model = $parse(attrs.fileModel);\r\n                    var modelSetter = model.assign;\r\n\r\n                    var onChangeFunc = function(){\r\n                        console.log(\"ça m'en touche une\");\r\n                        scope.$apply(function () {\r\n                            modelSetter(scope, element[0].files[0]);\r\n                        })\r\n                    }\r\n\r\n                    element.bind('change', onChangeFunc);\r\n                }\r\n            };\r\n        }])\r\n})();\r\n\r\n","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .service('authentication', authentication);\r\n\r\n    authentication.$inject = ['$http', '$window', 'multipartForm'];\r\n    function authentication($http, $window, multipartForm) {\r\n        var saveToken = function (token) {\r\n            $window.localStorage['mean-token'] = token;\r\n        };\r\n\r\n        var getToken = function () {\r\n            return $window.localStorage['mean-token'];\r\n        };\r\n\r\n\r\n        var isLoggedIn = function () {\r\n            var token = getToken();\r\n            var payload;\r\n\r\n            if (token) {\r\n                payload = token.split('.')[1];\r\n                payload = $window.atob(payload);\r\n                payload = JSON.parse(payload);\r\n\r\n                return payload.exp > Date.now() / 1000;\r\n            } else {\r\n                return false;\r\n            }\r\n        };\r\n        var currentUser = function () {\r\n            if (isLoggedIn()) {\r\n                var token = getToken();\r\n                var payload = token.split('.')[1];\r\n                payload = $window.atob(payload);\r\n                payload = JSON.parse(payload);\r\n                return {\r\n                    email: payload.email,\r\n                    name: payload.name,\r\n                    _id: payload._id\r\n                };\r\n            }\r\n        };\r\n\r\n        var register = function (user, callback) {\r\n            var uploadUrl = '/api/register';\r\n            multipartForm.post(uploadUrl, user, function (response) {\r\n                if (response.status === 200) {\r\n                    saveToken(response.data.token);\r\n                }\r\n                callback(response);\r\n            });\r\n        };\r\n\r\n        login = function (user) {\r\n            return $http.post('/api/login', user).success(function (data) {\r\n                saveToken(data.token);\r\n            });\r\n        };\r\n\r\n        logout = function () {\r\n            $window.localStorage.removeItem('mean-token');\r\n        };\r\n\r\n        return {\r\n            currentUser: currentUser,\r\n            saveToken: saveToken,\r\n            getToken: getToken,\r\n            isLoggedIn: isLoggedIn,\r\n            register: register,\r\n            login: login,\r\n            logout: logout\r\n        };\r\n    }\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .service('meanData', meanData);\r\n\r\n    meanData.$inject = ['$http', 'authentication'];\r\n    function meanData($http, authentication) {\r\n        /*Profile */\r\n        var getProfile = function (userID) {\r\n            return $http.get('/api/profile/' + userID, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            });\r\n        };\r\n\r\n        /*Playlists*/\r\n        var getMyPlaylists = function () {\r\n            var currentUserId = authentication.currentUser()._id;\r\n            return getUserPlaylists(currentUserId);\r\n        };\r\n\r\n        var getUserPlaylists = function (userID) {\r\n            return $http.get('/api/userPlaylists/' + userID, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            });\r\n        };\r\n\r\n        var createPlaylist = function (newPlaylist) {\r\n            return $http.post('/api/playlist',\r\n                {\r\n                    playlist: newPlaylist\r\n                },\r\n                {\r\n                    headers: {\r\n                        Authorization: 'Bearer ' + authentication.getToken()\r\n                    }\r\n                });\r\n        };\r\n\r\n        var editPlaylist = function (playlist) {\r\n            return $http.put('/api/playlist',\r\n                {\r\n                    playlist: playlist\r\n                },\r\n                {\r\n                    headers: {\r\n                        Authorization: 'Bearer ' + authentication.getToken()\r\n                    }\r\n                });\r\n        };\r\n\r\n        var deletePlaylist = function (playlist) {\r\n            return $http.delete('/api/playlist/' + playlist.ID,\r\n                {\r\n                    headers: {\r\n                        Authorization: 'Bearer ' + authentication.getToken()\r\n                    }\r\n                });\r\n        };\r\n\r\n        var getPlaylist = function (playlistId) {\r\n            return $http.get('/api/playlist/' + playlistId, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            });\r\n        };\r\n\r\n        var getLikedPlaylists = function () {\r\n            return $http.get('/api/likes', {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            })\r\n        };\r\n\r\n        var getPlaylistLikes = function(playlistID) {\r\n            return $http.get('/api/likes/' + playlistID, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            })\r\n        };\r\n\r\n        var getTopPlaylist = function () {\r\n            return $http.get('/api/topPlaylists');\r\n        };\r\n\r\n        /*Likes*/\r\n        var likePlaylist = function (playlistID) {\r\n            return $http.post('/api/likes',\r\n                {\r\n                    playlistID: playlistID\r\n                },\r\n                {\r\n                    headers: {\r\n                        Authorization: 'Bearer ' + authentication.getToken()\r\n                    }\r\n                });\r\n        };\r\n\r\n        var unlikePlaylist = function (playlistID) {\r\n            return $http.delete('/api/likes/' + playlistID, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            });\r\n        };\r\n\r\n        /*Comments*/\r\n        var commentPlaylist = function (playlistID, comment) {\r\n            return $http.post('/api/comments/',\r\n                {\r\n                    playlistID: playlistID,\r\n                    comment: comment\r\n                },\r\n                {\r\n                    headers: {\r\n                        Authorization: 'Bearer ' + authentication.getToken()\r\n                    }\r\n                });\r\n        };\r\n\r\n        var getComments = function (playlistID){\r\n            return $http.get('/api/comments/' + playlistID, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            });\r\n        };\r\n\r\n        var getYoutubeResults = function (research) {\r\n            return $http.get('/api/youtubeResults/' + research, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            });\r\n        };\r\n\r\n\r\n        return {\r\n            getProfile: getProfile,\r\n            getMyPlaylists: getMyPlaylists,\r\n            getUserPlaylists: getUserPlaylists,\r\n            createPlaylist: createPlaylist,\r\n            editPlaylist: editPlaylist,\r\n            deletePlaylist: deletePlaylist,\r\n            getPlaylist: getPlaylist,\r\n            getLikedPlaylists: getLikedPlaylists,\r\n            getPlaylistLikes: getPlaylistLikes,\r\n            getTopPlaylists: getTopPlaylist,\r\n            likePlaylist: likePlaylist,\r\n            unlikePlaylist: unlikePlaylist,\r\n            commentPlaylist:commentPlaylist,\r\n            getComments: getComments,\r\n            getYoutubeResults: getYoutubeResults\r\n        };\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .service('multipartForm', multipartForm);\r\n\r\n    multipartForm.$inject = ['$http'];\r\n    function multipartForm($http) {\r\n        this.post = function(uploadUrl, data, callback){\r\n            var fd = new FormData();\r\n            for(var key in data){\r\n                fd.append(key, data[key]);\r\n            }\r\n\r\n            $http.post(uploadUrl, fd, {\r\n                transformRequest: angular.identity,\r\n                headers: {'Content-Type': undefined}\r\n            }).then(\r\n                function(response){\r\n                   callback(response);\r\n                },\r\n                function(response){\r\n                    callback(response);\r\n                }\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .service('playlistService', playlist);\r\n\r\n    playlist.$inject = ['$rootScope'];\r\n    function playlist($rootScope) {\r\n        var currentPlaylist;\r\n\r\n        var setPlaylist = function(playlist){\r\n            currentPlaylist = playlist;\r\n            console.log('Playlist changed !');\r\n            $rootScope.$broadcast('playlistChanged', {\r\n                data: playlist\r\n            });\r\n        };\r\n\r\n        var getPlaylist = function(){\r\n            return currentPlaylist;\r\n        };\r\n\r\n        return{\r\n            getPlaylist : getPlaylist,\r\n            setPlaylist : setPlaylist\r\n        }\r\n    }\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('footCtrl', footCtrl);\r\n\r\n    function footCtrl() {\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .directive('foot', foot);\r\n\r\n    function foot () {\r\n        return {\r\n            restrict: 'EA',\r\n            templateUrl: '/common/directives/foot/footer.template.html',\r\n            controller: 'footCtrl as footervm'\r\n        };\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('navigationCtrl', navigationCtrl);\r\n\r\n    navigationCtrl.$inject = ['authentication'];\r\n    function navigationCtrl(authentication) {\r\n        var vm = this;\r\n\r\n        vm.isLoggedIn = authentication.isLoggedIn();\r\n\r\n        vm.currentUser = authentication.currentUser();\r\n    }\r\n\r\n})();","(function () {\r\n\r\n  angular\r\n    .module('meanApp')\r\n    .directive('navigation', navigation);\r\n\r\n  function navigation () {\r\n    return {\r\n      restrict: 'EA',\r\n      templateUrl: '/common/directives/navigation/navigation.template.html',\r\n      controller: 'navigationCtrl as navvm'\r\n    };\r\n  }\r\n\r\n})();","(function () {\n\n    angular\n        .module('meanApp')\n        .constant('YT_event',{\n            STOP:            0,\n            PLAY:            1,\n            PAUSE:           2,\n            STATUS_CHANGE:   3\n        } );\n\n})();","(function(){\n    angular\n        .module('meanApp')\n        .controller('playerCtrl', playerCtrl);\n\n    playerCtrl.$inject = ['$scope', 'YT_event', '$window'];\n    function playerCtrl($scope, YT_event, $window) {\n        var index = 0;\n        var currentPlaylist = [];\n        $scope.yt = {\n            width: 600,\n            height: 480,\n            videoid: \"M7lc1UVf-VE\",\n            playerStatus: \"NOT PLAYING\"\n        };\n\n        $scope.YT_event = YT_event;\n\n        $scope.sendControlEvent = function (ctrlEvent) {\n            this.$broadcast(ctrlEvent);\n        };\n\n        $scope.$on(YT_event.STATUS_CHANGE, function (event, data) {\n            $scope.yt.playerStatus = data;\n            if(data == 'ENDED'){\n                if(index<currentPlaylist.length){\n                    index ++;\n                    $scope.videoid = currentPlaylist[index].id;\n                    $scope.$broadcast(YT_event.PLAY);\n                }\n            }\n        });\n\n        $scope.$on('playlistChanged', function (event, data) {\n            currentPlaylist = data.data.JsonPlaylist.songs;\n            $scope.videoid = currentPlaylist[0].id;\n            index = 0;\n        })\n    }\n})();\n","/**\n * Created by Paul on 09/12/2016.\n */\n\n\n(function (){\n\n    angular\n        .module('meanApp')\n        .directive('player', player);\n\n    player.$inject = ['$window','YT_event']\n\n    function player($window,YT_event) {\n\n        return {\n            restrict: \"E\",\n\n            scope: {\n                height: \"@\",\n                width: \"@\",\n                videoid: \"@\"\n            },\n            controller : \"playerCtrl as yt\",\n\n            templateUrl: \"/common/directives/player/player.html\",\n\n            link: function(scope, element, attrs, $rootScope) {\n                var tag = document.createElement('script');\n                tag.src = \"https://www.youtube.com/iframe_api\";\n                var firstScriptTag = document.getElementsByTagName('script')[0];\n                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\n                var player;\n\n                $window.onYouTubeIframeAPIReady = function() {\n\n                    player = new YT.Player(element.children()[0], {\n                        playerVars: {\n                            autoplay: 1,\n                            html5: 1,\n                            theme: \"light\",\n                            modesbranding: 0,\n                            color: \"white\",\n                            iv_load_policy: 3,\n                            showinfo: 1,\n                            controls: 1\n                        },\n\n                        height: scope.height,\n                        width: scope.width,\n                        videoId: scope.videoid,\n\n                        events: {\n                            'onStateChange': function(event) {\n\n                                var message = {\n                                    event: YT_event.STATUS_CHANGE,\n                                    data: \"\"\n                                };\n\n                                switch(event.data) {\n                                    case YT.PlayerState.PLAYING:\n                                        message.data = \"PLAYING\";\n                                        break;\n                                    case YT.PlayerState.ENDED:\n                                        message.data = \"ENDED\";\n                                        break;\n                                    case YT.PlayerState.UNSTARTED:\n                                        message.data = \"NOT PLAYING\";\n                                        break;\n                                    case YT.PlayerState.PAUSED:\n                                        message.data = \"PAUSED\";\n                                        break;\n                                }\n\n                                scope.$apply(function() {\n                                    scope.$emit(message.event, message.data);\n                                });\n                            }\n                        }\n                    });\n                };\n\n                scope.$watch('height + width', function(newValue, oldValue) {\n                    if (newValue == oldValue) {\n                        return;\n                    }\n\n                    player.setSize(scope.width, scope.height);\n\n                });\n\n                scope.$watch('videoid', function(newValue, oldValue) {\n                    if (newValue == oldValue) {\n                        return;\n                    }\n\n                    player.cueVideoById(scope.videoid);\n                    player.playVideo();\n\n                });\n\n                scope.$on(YT_event.STOP, function () {\n                    player.seekTo(0);\n                    player.stopVideo();\n                });\n\n                scope.$on(YT_event.PLAY, function () {\n                    player.playVideo();\n                });\n\n                scope.$on(YT_event.PAUSE, function () {\n                    player.pauseVideo();\n                });\n            }\n        };\n\n\n\n\n    }\n\n\n})();\n\n","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .directive('topplaylists', topPlaylists);\r\n\r\n    function topPlaylists () {\r\n        return {\r\n            restrict: 'EA',\r\n            scope: {\r\n                limitrows: '='\r\n            },\r\n            templateUrl: '/common/directives/topPlaylists/topPlaylists.template.html',\r\n            controller: 'topPlaylistsTemplateCtrl as topPlaylistsVm'\r\n        };\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('topPlaylistsTemplateCtrl', topPlaylistsTemplateCtrl);\r\n\r\n    topPlaylistsTemplateCtrl.$inject = ['meanData', '$scope'];\r\n    function topPlaylistsTemplateCtrl(meanData, $scope) {\r\n        vm = this;\r\n        vm.TopPlaylists = {};\r\n        vm.Separator = [];\r\n        vm.limitrows = $scope.limitrows;\r\n        meanData.getTopPlaylists()\r\n            .error(function (error) {\r\n                alert(error);\r\n            })\r\n            .then(function (data) {\r\n                vm.TopPlaylists = data.data;\r\n                while (vm.TopPlaylists.length) {\r\n                    vm.Separator.push(vm.TopPlaylists.splice(0, 2));\r\n                }\r\n            })\r\n    }\r\n})();"]}