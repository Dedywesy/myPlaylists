{"version":3,"sources":["main.js","contact/contact.controller.js","home/home.controller.js","editPlaylist/editPlaylist.controller.js","myPlaylists/myPlaylists.controller.js","profile/profile.controller.js","topPlaylists/topPlaylists.controller.js","common/directives/fileModel.js","common/services/authentication.service.js","common/services/data.service.js","common/services/mulitpartForm.js","auth/logout/logout.controller.js","auth/login/login.controller.js","auth/register/register.controller.js","common/directives/navigation/navigation.controller.js","common/directives/navigation/navigation.directive.js","common/directives/foot/footer.controller.js","common/directives/foot/footer.directive.js","common/directives/topPlaylists/topPlaylists.controller.js","common/directives/topPlaylists/topPlaylists.directive.js"],"names":[],"mappingstxHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.min.js","sourcesContent":["(function () {\r\n\r\n    angular.module('meanApp', ['ngRoute', 'as.sortable']);\r\n\r\n    function config($routeProvider, $locationProvider) {\r\n        $routeProvider\r\n            .when('/', {\r\n                templateUrl: 'home/home.view.html',\r\n                controller: 'homeCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/register', {\r\n                templateUrl: '/auth/register/register.view.html',\r\n                controller: 'registerCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/login', {\r\n                templateUrl: '/auth/login/login.view.html',\r\n                controller: 'loginCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/profile', {\r\n                templateUrl: '/profile/profile.view.html',\r\n                controller: 'profileCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/contact', {\r\n                templateUrl: '/contact/contact.view.html',\r\n                controller: 'contactCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/topPlaylists', {\r\n                templateUrl: '/topPlaylists/topPlaylists.view.html',\r\n                controller: 'topPlaylistsCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/myPlaylists', {\r\n                templateUrl: '/myPlaylists/myPlaylists.view.html',\r\n                controller: 'myPlaylistsCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/logout', {\r\n                templateUrl: '/home/home.view.html',\r\n                controller: 'logoutCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .when('/editPlaylist/:id', {\r\n                templateUrl: '/editPlaylist/editPlaylist.view.html',\r\n                controller: 'editPlaylistCtrl',\r\n                controllerAs: 'vm'\r\n            })\r\n            .otherwise({redirectTo: '/'});\r\n\r\n        // use the HTML5 History API\r\n        $locationProvider.html5Mode(true);\r\n    }\r\n\r\n    function run($rootScope, $location, authentication) {\r\n        $rootScope.$on('$routeChangeStart', function (event, nextRoute, currentRoute) {\r\n            if ($location.path() === '/profile' && !authentication.isLoggedIn()) {\r\n                $location.path('/login');\r\n            }\r\n            if ($location.path() === '/myPlaylists' && !authentication.isLoggedIn()) {\r\n                $location.path('/login');\r\n            }\r\n            if ($location.path() === '/editPlaylist' && !authentication.isLoggedIn()) {\r\n                $location.path('/login');\r\n            }\r\n        });\r\n    }\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .config(['$routeProvider', '$locationProvider', config])\r\n        .run(['$rootScope', '$location', 'authentication', run]);\r\n\r\n})();","(function() {\r\n    angular\r\n        .module('meanApp')\r\n        .controller('contactCtrl', contactCtrl);\r\n\r\n    function contactCtrl () {\r\n\r\n    }\r\n\r\n})();","(function() {\r\n  \r\n  angular\r\n    .module('meanApp')\r\n    .controller('homeCtrl', homeCtrl);\r\n\r\n    function homeCtrl () {\r\n\r\n    }\r\n\r\n})();","(function () {\r\n    angular\r\n        .module('meanApp')\r\n        .controller('editPlaylistCtrl', editPlaylistCtrl);\r\n\r\n    editPlaylistCtrl.$inject = ['$location', 'authentication', 'meanData', '$routeParams'];\r\n    function editPlaylistCtrl($location, authentication, meanData, $routeParams, asSortable) {\r\n        vm = this;\r\n        var id = parseInt($routeParams.id);\r\n\r\n        //If the playlist can be accessed\r\n        var playlistRetrieved = function () {\r\n            vm.tempPlaylist = copyPlaylist(vm.playlist);\r\n            vm.link = \"\";\r\n            vm.title = \"\";\r\n            vm.songListModified = false;\r\n\r\n            if (vm.playlist == {}) {\r\n                alert(\"no playlist to edit\");\r\n                $location.path('home');\r\n            }\r\n            if (authentication.currentUser()._id != vm.playlist.UserID) {\r\n                alert(\"This is not the playlist you are looking for :)\");\r\n                $location.path('home');\r\n            }\r\n\r\n            vm.editMode = false;\r\n            vm.saveEdit = function () {\r\n                console.log(\"Saving modifications\");\r\n                if (vm.playlist.title != vm.tempPlaylist.title ||\r\n                    vm.playlist.description != vm.tempPlaylist.description ||\r\n                    vm.playlist.isPublic != vm.tempPlaylist.isPublic ||\r\n                    vm.songListModified) {\r\n                    resetRanks();\r\n                    vm.tempPlaylist.jsonPlaylist = angular.toJson(vm.tempPlaylist.jsonPlaylist);\r\n                    meanData.editPlaylist(vm.tempPlaylist)\r\n                        .error(function (err) {\r\n                            alert(\"error while updating playlist\", err);\r\n                        })\r\n                        .then(function (data) {\r\n                            vm.playlist = copyPlaylist(data.data);\r\n                            vm.tempPlaylist.jsonPlaylist = JSON.parse(vm.tempPlaylist.jsonPlaylist);\r\n                            vm.editMode = false;\r\n                            vm.songListModified = false;\r\n                        })\r\n                }\r\n            };\r\n\r\n            vm.cancelEdit = function () {\r\n                vm.editMode = false;\r\n                var temp = vm.tempPlaylist.jsonPlaylist;\r\n                vm.tempPlaylist = copyPlaylist(vm.playlist);\r\n                vm.tempPlaylist.jsonPlaylist = temp; //TODO Adapt\r\n            };\r\n\r\n            vm.delete = function () {\r\n                console.log('delete playlist');\r\n                var result = confirm(\"Do you really want to delete this playlist?\");\r\n                if (result) {\r\n                    meanData.deletePlaylist(vm.playlist)\r\n                        .error(function (err) {\r\n                            alert(\"error while deleting playlist\", err);\r\n                        })\r\n                        .then(function (data) {\r\n                            $location.path('/myPlaylists');\r\n                        })\r\n                }\r\n            };\r\n\r\n            vm.addSong = function () {\r\n                vm.songListModified = true;\r\n                var newSong = {\r\n                    title: vm.title,\r\n                    link: vm.link,\r\n                    rank: vm.tempPlaylist.jsonPlaylist.songs.length\r\n                };\r\n                vm.tempPlaylist.jsonPlaylist.songs.push(newSong);\r\n                vm.title = \"\";\r\n                vm.link = \"\";\r\n            };\r\n\r\n            vm.removeSong = function (song) {\r\n                vm.songListModified = true;\r\n                var index = vm.tempPlaylist.jsonPlaylist.songs.indexOf(song);\r\n                if(index != -1){\r\n                    vm.tempPlaylist.jsonPlaylist.songs.splice(index, 1);\r\n                }\r\n            };\r\n\r\n            vm.items = [\"1\", \"2\", \"3\", \"4\"];\r\n\r\n            vm.dragControlListeners = {\r\n                accept: function (sourceItemHandleScope, destSortableScope) {return true},//override to determine\r\n                // drag is allowed or not. default is true.\r\n                itemMoved: function (event) {},//Does nothing,\r\n                orderChanged: function (event) {vm.songListModified = true;},//Do what you want},\r\n                longTouch: true\r\n            };\r\n\r\n        };\r\n\r\n        var copyPlaylist = function (playlist) {\r\n            return {\r\n                ID: playlist.ID,\r\n                userId: playlist.userID,\r\n                isPublic: playlist.isPublic,\r\n                name: playlist.name,\r\n                description: playlist.description,\r\n                jsonPlaylist: playlist.jsonPlaylist || {\"songs\": []}\r\n            };\r\n        };\r\n        //Real entry point of the controller\r\n        vm.playlist = {};\r\n        meanData.getPlaylist(id)\r\n            .error(function (error) {\r\n                alert(error.message);\r\n                $location.path(\"myPlaylists\");\r\n            })\r\n            .then(function (data) {\r\n                vm.playlist = data.data;\r\n                playlistRetrieved();\r\n            });\r\n\r\n\r\n        vm.indexOfSong = function(song){\r\n            return vm.tempPlaylist.jsonPlaylist.songs.indexOf(song);\r\n        };\r\n\r\n        function resetRanks(){\r\n            for(var i = 0; i<vm.tempPlaylist.jsonPlaylist.songs.length ; i++ ){\r\n                vm.tempPlaylist.jsonPlaylist.songs[i].rank = i;\r\n            }\r\n        }\r\n    }\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('myPlaylistsCtrl', myPlaylistsCtrl);\r\n\r\n    myPlaylistsCtrl.$inject = ['$location', 'meanData'];\r\n    function myPlaylistsCtrl($location, meanData) {\r\n        var vm = this;\r\n\r\n        vm.playlists = [];\r\n        vm.likes = [];\r\n        vm.newPlaylist = {\r\n            name: \"\",\r\n            description: \"\",\r\n            isPublic: true\r\n        };\r\n\r\n        meanData.getMyPlaylists()\r\n            .success(function (data) {\r\n                vm.playlists = data;\r\n                meanData.getLikedPlaylists()\r\n                    .success(function (data) {\r\n                        vm.likes = data;\r\n                        vm.playlists.forEach(function (itemPlaylist) {\r\n                            vm.likes.forEach(function (itemLike) {\r\n                                if (itemPlaylist.ID == itemLike.playlistId) {\r\n                                    itemPlaylist.liked = true;\r\n                                }\r\n                            })\r\n                        })\r\n                    })\r\n                    .error(function (error) {\r\n                        console.error(error);\r\n                    });\r\n            })\r\n            .error(function (error) {\r\n                console.error(error);\r\n            });\r\n\r\n\r\n        vm.addPlaylist = function () {\r\n            console.log(\"creating playlist. Name : \", vm.newPlaylist.name);\r\n            meanData.createPlaylist(vm.newPlaylist)\r\n                .error(function (err) {\r\n                    alert(\"Error while adding playlist\", err);\r\n                })\r\n                .then(function (data) {\r\n                    vm.playlists.push(data.data);\r\n                    vm.newPlaylist.name = \"\";\r\n                    vm.newPlaylist.description = \"\";\r\n                });\r\n        };\r\n\r\n        vm.edit = function (playlist) {\r\n            $location.path('editPlaylist/' + playlist.ID);\r\n        };\r\n\r\n        vm.play = function (playlist) {\r\n            console.log(\"Play\", playlist); //TODO\r\n        };\r\n\r\n        vm.toggleLike = function (playlist) {\r\n            if(playlist.liked){\r\n                meanData.unlikePlaylist(playlist.ID)\r\n                    .error(function (error) {\r\n                        console.log(error);\r\n                    })\r\n                    .then(function (data) {\r\n                        var index = vm.likes.indexOf(playlist.ID);\r\n                        if(index != -1){\r\n                            vm.likes.splice(index, 1);\r\n                        }\r\n                        vm.playlists.forEach(function (item) {\r\n                            if (item.ID == playlist.ID) {\r\n                                item.likeCount--;\r\n                                item.liked = false;\r\n                            }\r\n                        })\r\n                    });\r\n            }\r\n            else{\r\n                meanData.likePlaylist(playlist.ID)\r\n                    .error(function (error) {\r\n                        console.log(error);\r\n                    })\r\n                    .then(function (data) {\r\n                        vm.likes.push(playlist.ID);\r\n                        vm.playlists.forEach(function (item) {\r\n                            if (item.ID == playlist.ID) {\r\n                                item.likeCount++;\r\n                                item.liked = true;\r\n                            }\r\n                        })\r\n                    });\r\n            }\r\n\r\n\r\n\r\n        };\r\n\r\n        vm.unlike = function (playlistID) {\r\n            meanData.unlikePlaylist(playlistID)\r\n                .error(function (error) {\r\n                    console.log(error);\r\n                })\r\n                .then(function (data) {\r\n                    var index = vm.likes.indexOf(playlistID);\r\n                    if (index != -1) {\r\n                        vm.likes.splice(index, 1);\r\n                    }\r\n                    vm.playlists.forEach(function (item) {\r\n                        if (item.ID == playlistID) {\r\n                            item.likeCount--;\r\n                        }\r\n                    })\r\n                });\r\n        }\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('profileCtrl', profileCtrl);\r\n\r\n    profileCtrl.$inject = ['meanData'];\r\n    function profileCtrl(meanData) {\r\n        var vm = this;\r\n        vm.user = {};\r\n        meanData.getProfile()\r\n            .success(function (data) {\r\n                vm.user = data;\r\n            })\r\n            .error(function (e) {\r\n                console.log(e);\r\n            });\r\n    }\r\n\r\n})();\r\n","(function() {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('topPlaylistsCtrl', topPlaylistsCtrl);\r\n\r\n    function topPlaylistsCtrl () {\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .directive('fileModel', ['$parse', function ($parse) {\r\n            return {\r\n                restrict: 'A',\r\n                link: function (scope, element, attrs) {\r\n                    var model = $parse(attrs.fileModel);\r\n                    var modelSetter = model.assign;\r\n\r\n                    var onChangeFunc = function(){\r\n                        console.log(\"ça m'en touche une\");\r\n                        scope.$apply(function () {\r\n                            modelSetter(scope, element[0].files[0]);\r\n                        })\r\n                    }\r\n\r\n                    element.bind('change', onChangeFunc);\r\n                }\r\n            };\r\n        }])\r\n})();\r\n\r\n","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .service('authentication', authentication);\r\n\r\n    authentication.$inject = ['$http', '$window', 'multipartForm'];\r\n    function authentication($http, $window, multipartForm) {\r\n        var saveToken = function (token) {\r\n            $window.localStorage['mean-token'] = token;\r\n        };\r\n\r\n        var getToken = function () {\r\n            return $window.localStorage['mean-token'];\r\n        };\r\n\r\n\r\n        var isLoggedIn = function () {\r\n            var token = getToken();\r\n            var payload;\r\n\r\n            if (token) {\r\n                payload = token.split('.')[1];\r\n                payload = $window.atob(payload);\r\n                payload = JSON.parse(payload);\r\n\r\n                return payload.exp > Date.now() / 1000;\r\n            } else {\r\n                return false;\r\n            }\r\n        };\r\n        var currentUser = function () {\r\n            if (isLoggedIn()) {\r\n                var token = getToken();\r\n                var payload = token.split('.')[1];\r\n                payload = $window.atob(payload);\r\n                payload = JSON.parse(payload);\r\n                return {\r\n                    email: payload.email,\r\n                    name: payload.name,\r\n                    _id: payload._id\r\n                };\r\n            }\r\n        };\r\n\r\n        var register = function (user, callback) {\r\n            var uploadUrl = '/api/register';\r\n            multipartForm.post(uploadUrl, user, function (response) {\r\n                if (response.status === 200) {\r\n                    saveToken(response.data.token);\r\n                }\r\n                callback(response);\r\n            });\r\n        };\r\n\r\n        login = function (user) {\r\n            return $http.post('/api/login', user).success(function (data) {\r\n                saveToken(data.token);\r\n            });\r\n        };\r\n\r\n        logout = function () {\r\n            $window.localStorage.removeItem('mean-token');\r\n        };\r\n\r\n        return {\r\n            currentUser: currentUser,\r\n            saveToken: saveToken,\r\n            getToken: getToken,\r\n            isLoggedIn: isLoggedIn,\r\n            register: register,\r\n            login: login,\r\n            logout: logout\r\n        };\r\n    }\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .service('meanData', meanData);\r\n\r\n    meanData.$inject = ['$http', 'authentication'];\r\n    function meanData($http, authentication) {\r\n\r\n        /*Profile */\r\n        var getProfile = function () {\r\n            return $http.get('/api/profile', {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            });\r\n        };\r\n\r\n        /*Playlists*/\r\n        var getMyPlaylists = function () {\r\n            var currentUserId = authentication.currentUser()._id;\r\n            return getUserPlaylists(currentUserId);\r\n        };\r\n\r\n        var getUserPlaylists = function (userID) {\r\n            return $http.get('/api/userPlaylists/' + userID, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            });\r\n        };\r\n\r\n        var createPlaylist = function (newPlaylist) {\r\n            return $http.post('/api/playlist',\r\n                {\r\n                    playlist: newPlaylist\r\n                },\r\n                {\r\n                    headers: {\r\n                        Authorization: 'Bearer ' + authentication.getToken()\r\n                    }\r\n                });\r\n        };\r\n\r\n        var editPlaylist = function (playlist) {\r\n            return $http.put('/api/playlist',\r\n                {\r\n                    playlist: playlist\r\n                },\r\n                {\r\n                    headers: {\r\n                        Authorization: 'Bearer ' + authentication.getToken()\r\n                    }\r\n                });\r\n        };\r\n\r\n        var deletePlaylist = function (playlist) {\r\n            return $http.delete('/api/playlist/' + playlist.ID,\r\n                {\r\n                    headers: {\r\n                        Authorization: 'Bearer ' + authentication.getToken()\r\n                    }\r\n                });\r\n        };\r\n\r\n        var getPlaylist = function (playlistId) {\r\n            return $http.get('/api/playlist/' + playlistId, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            });\r\n        };\r\n\r\n        var getLikedPlaylists = function () {\r\n            return $http.get('/api/likes', {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            })\r\n        };\r\n\r\n        var likePlaylist = function (playlistID) {\r\n            return $http.post('/api/likes', {\r\n                    playlistID: playlistID\r\n                },\r\n                {\r\n                    headers: {\r\n                        Authorization: 'Bearer ' + authentication.getToken()\r\n                    }\r\n                });\r\n        };\r\n\r\n        var unlikePlaylist = function(playlistID){\r\n            return $http.delete('/api/likes/' + playlistID, {\r\n                headers: {\r\n                    Authorization: 'Bearer ' + authentication.getToken()\r\n                }\r\n            });\r\n        };\r\n\r\n        return {\r\n            getProfile: getProfile,\r\n            getMyPlaylists: getMyPlaylists,\r\n            createPlaylist: createPlaylist,\r\n            editPlaylist: editPlaylist,\r\n            deletePlaylist: deletePlaylist,\r\n            getPlaylist: getPlaylist,\r\n            getLikedPlaylists: getLikedPlaylists,\r\n            likePlaylist: likePlaylist,\r\n            unlikePlaylist: unlikePlaylist\r\n        };\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .service('multipartForm', multipartForm);\r\n\r\n    multipartForm.$inject = ['$http'];\r\n    function multipartForm($http) {\r\n        this.post = function(uploadUrl, data, callback){\r\n            var fd = new FormData();\r\n            for(var key in data){\r\n                fd.append(key, data[key]);\r\n            }\r\n\r\n            $http.post(uploadUrl, fd, {\r\n                transformRequest: angular.identity,\r\n                headers: {'Content-Type': undefined}\r\n            }).then(\r\n                function(response){\r\n                   callback(response);\r\n                },\r\n                function(response){\r\n                    callback(response);\r\n                }\r\n            );\r\n        }\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('logoutCtrl', logoutCtrl);\r\n\r\n    logoutCtrl.$inject = ['$location', 'authentication'];\r\n    function logoutCtrl($location, authentication) {\r\n        var vm = this;\r\n\r\n        authentication.logout();\r\n        $location.path('/');\r\n    }\r\n\r\n})();","(function () {\r\n\r\n  angular\r\n  .module('meanApp')\r\n  .controller('loginCtrl', loginCtrl);\r\n\r\n  loginCtrl.$inject = ['$location', 'authentication'];\r\n  function loginCtrl($location, authentication) {\r\n    var vm = this;\r\n\r\n    vm.credentials = {\r\n      email : \"\",\r\n      password : \"\"\r\n    };\r\n\r\n    vm.onSubmit = function () {\r\n      authentication\r\n        .login(vm.credentials)\r\n        .error(function(err){\r\n          alert(err);\r\n        })\r\n        .then(function(){\r\n          $location.path('profile');\r\n        });\r\n    };\r\n\r\n  }\r\n\r\n})();","(function () {\r\n\r\n  angular\r\n    .module('meanApp')\r\n    .controller('registerCtrl', registerCtrl);\r\n\r\n  registerCtrl.$inject = ['$location', 'authentication'];\r\n  function registerCtrl($location, authentication) {\r\n    var vm = this;\r\n\r\n    vm.credentials = {\r\n      name : \"\",\r\n      email : \"\",\r\n      password : \"\"\r\n    };\r\n\r\n    vm.onSubmit = function () {\r\n      authentication.register(vm.credentials, function (response) {\r\n          if(response.status === 200){\r\n              $location.path('profile');\r\n          } else{\r\n              alert(err);\r\n          }\r\n      })\r\n    };\r\n  }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('navigationCtrl', navigationCtrl);\r\n\r\n    navigationCtrl.$inject = ['authentication'];\r\n    function navigationCtrl(authentication) {\r\n        var vm = this;\r\n\r\n        vm.isLoggedIn = authentication.isLoggedIn();\r\n\r\n        vm.currentUser = authentication.currentUser();\r\n    }\r\n\r\n})();","(function () {\r\n\r\n  angular\r\n    .module('meanApp')\r\n    .directive('navigation', navigation);\r\n\r\n  function navigation () {\r\n    return {\r\n      restrict: 'EA',\r\n      templateUrl: '/common/directives/navigation/navigation.template.html',\r\n      controller: 'navigationCtrl as navvm'\r\n    };\r\n  }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('footCtrl', footCtrl);\r\n\r\n    function footCtrl() {\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .directive('foot', foot);\r\n\r\n    function foot () {\r\n        return {\r\n            restrict: 'EA',\r\n            templateUrl: '/common/directives/foot/footer.template.html',\r\n            controller: 'footCtrl as footervm'\r\n        };\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .controller('topPlaylistsCtrl', topPlaylistsCtrl);\r\n\r\n    topPlaylistsCtrl.$inject = ['meanData'];\r\n    function topPlaylistsCtrl(meanData) {\r\n\r\n    }\r\n\r\n})();","(function () {\r\n\r\n    angular\r\n        .module('meanApp')\r\n        .directive('topplaylists', topPlaylists);\r\n\r\n    function topPlaylists () {\r\n        return {\r\n            restrict: 'EA',\r\n            templateUrl: '/common/directives/topPlaylists/topPlaylists.template.html',\r\n            controller: 'topplaylistsCtrl as topplaylistsvm'\r\n        };\r\n    }\r\n\r\n})();"]}