(function () {

    angular.module('meanApp', ['ngRoute', 'as.sortable']);

    function config($routeProvider, $locationProvider) {
        $routeProvider
            .when('/', {
                templateUrl: 'home/home.view.html',
                controller: 'homeCtrl',
                controllerAs: 'vm'
            })
            .when('/register', {
                templateUrl: '/auth/register/register.view.html',
                controller: 'registerCtrl',
                controllerAs: 'vm'
            })
            .when('/login', {
                templateUrl: '/auth/login/login.view.html',
                controller: 'loginCtrl',
                controllerAs: 'vm'
            })
            .when('/profile/:id?', {
                templateUrl: '/profile/profile.view.html',
                controller: 'profileCtrl',
                controllerAs: 'vm'
            })
            .when('/contact', {
                templateUrl: '/contact/contact.view.html',
                controller: 'contactCtrl',
                controllerAs: 'vm'
            })
            .when('/topPlaylists', {
                templateUrl: '/topPlaylists/topPlaylists.view.html',
                controller: 'topPlaylistsCtrl',
                controllerAs: 'vm'
            })
            .when('/myPlaylists', {
                templateUrl: '/myPlaylists/myPlaylists.view.html',
                controller: 'myPlaylistsCtrl',
                controllerAs: 'vm'
            })
            .when('/logout', {
                templateUrl: '/home/home.view.html',
                controller: 'logoutCtrl',
                controllerAs: 'vm'
            })
            .when('/editPlaylist/:id', {
                templateUrl: '/editPlaylist/editPlaylist.view.html',
                controller: 'editPlaylistCtrl',
                controllerAs: 'vm'
            })
            .when('/playlist/:id', {
                templateUrl: '/playlist/playlist.view.html',
                controller: 'playlistCtrl',
                controllerAs: 'vm'
            })
            .otherwise({redirectTo: '/'});

        // use the HTML5 History API
        $locationProvider.html5Mode(true);
    }

    function run($rootScope, $location, authentication) {
        $rootScope.$on('$routeChangeStart', function (event, nextRoute, currentRoute) {
            if ($location.path() === '/profile' && !authentication.isLoggedIn()) {
                $location.path('/login');
            }
            if ($location.path() === '/myPlaylists' && !authentication.isLoggedIn()) {
                $location.path('/login');
            }
            if ($location.path() === '/editPlaylist' && !authentication.isLoggedIn()) {
                $location.path('/login');
            }
        });
    }

    angular
        .module('meanApp')
        .config(['$routeProvider', '$locationProvider', config])
        .run(['$rootScope', '$location', 'authentication', run]);

})();
(function() {
    angular
        .module('meanApp')
        .controller('contactCtrl', contactCtrl);

    function contactCtrl () {

    }

})();
(function () {
    angular
        .module('meanApp')
        .controller('editPlaylistCtrl', editPlaylistCtrl);

    editPlaylistCtrl.$inject = ['$location', 'authentication', 'meanData', '$routeParams'];
    function editPlaylistCtrl($location, authentication, meanData, $routeParams) {
        vm = this;
        var id = parseInt($routeParams.id);

        //If the playlist can be accessed
        var playlistRetrieved = function () {
            vm.tempPlaylist = copyPlaylist(vm.playlist);
            vm.link = "";
            vm.title = "";
            vm.research = "";
            vm.YoutubeResults = [];
            vm.SoundcloudResults = [];
            vm.songListModified = false;

            if (vm.playlist == {}) {
                alert("no playlist to edit");
                $location.path('home');
            }
            if (authentication.currentUser()._id != vm.playlist.UserID) {
                alert("This is not the playlist you are looking for :)");
                $location.path('home');
            }

            vm.editMode = false;
            vm.saveEdit = function () {
                console.log("Saving modifications");
                if (vm.playlist.Name != vm.tempPlaylist.Name ||
                    vm.playlist.Description != vm.tempPlaylist.Description ||
                    vm.playlist.IsPublic != vm.tempPlaylist.IsPublic ||
                    vm.songListModified) {
                    resetRanks();
                    vm.tempPlaylist.JsonPlaylist = angular.toJson(vm.tempPlaylist.JsonPlaylist);
                    meanData.editPlaylist(vm.tempPlaylist)
                        .error(function (err) {
                            alert("error while updating playlist" + err);
                        })
                        .then(function (data) {
                            vm.playlist = copyPlaylist(data.data);
                            vm.tempPlaylist.JsonPlaylist = JSON.parse(vm.tempPlaylist.JsonPlaylist);
                            vm.songListModified = false;
                        })
                }
                vm.editMode = false;
            };

            vm.cancelEdit = function () {
                vm.editMode = false;
                var temp = vm.tempPlaylist.JsonPlaylist;
                vm.tempPlaylist = copyPlaylist(vm.playlist);
                vm.tempPlaylist.JsonPlaylist = temp; //TODO Adapt
            };

            vm.delete = function () {
                console.log('delete playlist');
                var result = confirm("Do you really want to delete this playlist?");
                if (result) {
                    meanData.deletePlaylist(vm.playlist)
                        .error(function (err) {
                            alert("error while deleting playlist", err);
                        })
                        .then(function (data) {
                            $location.path('/myPlaylists');
                        })
                }
            };

            vm.addYoutube = function(result){
                vm.songListModified = true;
                var newSong = {
                    from : "Youtube",
                    title : result.snippet.title,
                    id: result.id.videoId,
                    link: "https://www.youtube.com/watch?v="+result.id.videoId,
                    rank: vm.tempPlaylist.JsonPlaylist.songs.length,
                    artwork:result.snippet.thumbnails.default.url
                };
                vm.tempPlaylist.JsonPlaylist.songs.push(newSong);
            };

            vm.addSoundcloud = function(result){
                vm.songListModified = true;
                var title = result.title + " - " + result.user.username;
                var newSong = {
                    from : "Soundcloud",
                    title : title,
                    id: result.id,
                    link: result.permalink_url,
                    rank: vm.tempPlaylist.JsonPlaylist.songs.length,
                    artwork: result.artwork_url
                };
                vm.tempPlaylist.JsonPlaylist.songs.push(newSong);
            };

            vm.searchSong = function(){
              meanData.getYoutubeResults(vm.research)
                  .error(function (error) {
                      console.log(error)
                  })
                  .then(function(data){
                      vm.YoutubeResults = data.data.items;
                  });

              meanData.getSoundcloudResults(vm.research)
                  .error(function (error) {
                      console.log(error)
                  })
                  .then(function(data){
                      var result = JSON.parse(data.data);
                      if(result.length > 5){
                          vm.SoundcloudResults = result.splice(0, 4);
                      }else{
                          vm.SoundcloudResults = result;
                      }

                  });
            };

            vm.removeSong = function (song) {
                vm.songListModified = true;
                var index = vm.tempPlaylist.JsonPlaylist.songs.indexOf(song);
                if(index != -1){
                    vm.tempPlaylist.JsonPlaylist.songs.splice(index, 1);
                }
            };

            vm.dragControlListeners = {
                accept: function (sourceItemHandleScope, destSortableScope) {return true},//override to determine
                // drag is allowed or not. default is true.
                itemMoved: function (event) {},//Does nothing,
                orderChanged: function (event) {vm.songListModified = true;},//Do what you want},
                longTouch: true
            };

        };

        var copyPlaylist = function (playlist) {
            return {
                ID: playlist.ID,
                UserID: playlist.UserID,
                IsPublic: playlist.IsPublic,
                Name: playlist.Name,
                Description: playlist.Description,
                JsonPlaylist: playlist.JsonPlaylist || {"songs": []}
            };
        };
        //Real entry point of the controller
        vm.playlist = {};
        meanData.getPlaylist(id)
            .error(function (error) {
                alert(error.message);
                $location.path("myPlaylists");
            })
            .then(function (data) {
                vm.playlist = data.data;
                playlistRetrieved();
            });


        vm.indexOfSong = function(song){
            return vm.tempPlaylist.JsonPlaylist.songs.indexOf(song);
        };

        function resetRanks(){
            for(var i = 0; i<vm.tempPlaylist.JsonPlaylist.songs.length ; i++ ){
                vm.tempPlaylist.JsonPlaylist.songs[i].rank = i;
            }
        }
    }
})();
(function() {
  
  angular
    .module('meanApp')
    .controller('homeCtrl', homeCtrl);

    function homeCtrl () {

    }

})();
(function () {

    angular
        .module('meanApp')
        .controller('myPlaylistsCtrl', myPlaylistsCtrl);

    myPlaylistsCtrl.$inject = ['$location', 'meanData', 'playlistService'];
    function myPlaylistsCtrl($location, meanData, playlistService) {
        var vm = this;

        vm.playlists = [];
        vm.likes = [];
        vm.newPlaylist = {
            name: "",
            description: "",
            isPublic: true
        };

        meanData.getMyPlaylists()
            .error(function (error) {
                console.error(error);
            })
            .then(function (data) {
                vm.playlists = data.data;
                meanData.getLikedPlaylists()
                    .error(function (error) {
                        console.error(error);
                    })
                    .then(function (data) {
                        vm.likes = data.data;
                        vm.playlists.forEach(function (itemPlaylist) {
                            vm.likes.forEach(function (itemLike) {
                                if (itemPlaylist.ID == itemLike.PlaylistID) {
                                    itemPlaylist.liked = true;
                                }
                            })
                        })
                    })
            });



        vm.addPlaylist = function () {
            console.log("creating playlist. Name : ", vm.newPlaylist.name);
            meanData.createPlaylist(vm.newPlaylist)
                .error(function (err) {
                    alert("Error while adding playlist", err);
                })
                .then(function (data) {
                    vm.playlists.push(data.data);
                    vm.newPlaylist.name = "";
                    vm.newPlaylist.description = "";
                });
        };

        vm.edit = function (playlist) {
            $location.path('editPlaylist/' + playlist.ID);
        };

        vm.play = function (playlist) {
            playlistService.setPlaylist(playlist);
        };

        vm.toggleLike = function (playlist) {
            if(playlist.liked){
                meanData.unlikePlaylist(playlist.ID)
                    .error(function (error) {
                        console.log(error);
                    })
                    .then(function (data) {
                        var index = vm.likes.indexOf(playlist.ID);
                        if(index != -1){
                            vm.likes.splice(index, 1);
                        }
                        vm.playlists.forEach(function (item) {
                            if (item.ID == playlist.ID) {
                                item.likeCount--;
                                item.liked = false;
                            }
                        })
                    });
            }
            else{
                meanData.likePlaylist(playlist.ID)
                    .error(function (error) {
                        console.log(error);
                    })
                    .then(function (data) {
                        vm.likes.push(playlist.ID);
                        vm.playlists.forEach(function (item) {
                            if (item.ID == playlist.ID) {
                                item.likeCount++;
                                item.liked = true;
                            }
                        })
                    });
            }
        };
    }

})();
(function () {
    angular
        .module('meanApp')
        .controller('playlistCtrl', playlistCtrl);

    playlistCtrl.$inject = ['$location', 'meanData', 'authentication', '$routeParams', 'playlistService'];
    function playlistCtrl($location, meanData, authentication, $routeParams, playlistService) {
        vm = this;
        var id = parseInt($routeParams.id);

        //If the playlist can be accessed
        var playlistRetrieved = function () {
            if (vm.playlist == {}) {
                alert("no playlist at this id");
                $location.path('home');
            }
            //Get profile
            meanData.getProfile(vm.playlist.UserID)
                .error(function (error) {
                    console.error("Error while retrieving user", error)
                })
                .then(function (data) {
                    vm.profile = data.data;
                });

            //Get playlist comments
            meanData.getComments(vm.playlist.ID)
                .error(function (error) {
                    console.error("Error while retrieving comments", error)
                })
                .then(function (data) {
                    vm.comments = data.data;
                });

            //Get playlist likes
            meanData.getPlaylistLikes(vm.playlist.ID)
                .error(function (error) {
                    console.error(error);
                })
                .then(function (data) {
                    var likes = data.data;
                    vm.playlist.likeCount = likes.length;
                    vm.playlist.liked = false;
                    for (var i = 0; i < likes.length; i++) {
                        if (likes[i].UserID == vm.user._id) {
                            vm.playlist.liked = true;
                            break;
                        }
                    }
                })
        };

        vm.play = function () {
            playlistService.setPlaylist(vm.playlist);
        };

        vm.addComment = function () {
            if (vm.newComment != "") {
                meanData.commentPlaylist(vm.playlist.ID, vm.newComment)
                    .error(function (error) {
                        alert("Error while adding comment, try again later")
                    })
                    .then(function (result) {
                        result.data.Name = vm.user.name;
                        vm.comments.push(result.data);
                        vm.newComment = "";
                    });
            }
        };

        vm.toggleLike = function () {
            if (vm.playlist.liked) {
                meanData.unlikePlaylist(vm.playlist.ID)
                    .error(function (error) {
                        console.log(error);
                    })
                    .then(function (data) {
                        vm.playlist.liked = false;
                        vm.playlist.likeCount--;
                    });
            }
            else {
                meanData.likePlaylist(vm.playlist.ID)
                    .error(function (error) {
                        console.log(error);
                    })
                    .then(function (data) {
                        vm.playlist.likeCount++;
                        vm.playlist.liked = true;

                    });
            }
        };

        //Real entry point of the controller
        vm.playlist = {};
        vm.profile = {};
        vm.comments = [];
        vm.newComment = "";
        vm.user = authentication.currentUser();
        meanData.getPlaylist(id)
            .error(function (error) {
                alert(error.message);
                $location.path("myPlaylists");
            })
            .then(function (data) {
                vm.playlist = data.data;
                playlistRetrieved();
            });
    }
})();

(function () {

    angular
        .module('meanApp')
        .controller('profileCtrl', profileCtrl);

    profileCtrl.$inject = ['meanData', 'authentication', '$routeParams'];
    function profileCtrl(meanData, authentication, $routeParams) {
        var vm = this;
        var id;
        var currentUserID = authentication.currentUser()._id;
        var userID = parseInt($routeParams.id);
        if(!$routeParams.id){
            id = currentUserID
        }else{
            id = userID;
        }
        vm.personalProfile = (currentUserID == id);
        vm.user = {};
        meanData.getProfile(id)
            .success(function (data) {
                vm.user = data;
            })
            .error(function (e) {
                console.log(e);
            });

        vm.likedPlaylists = [];
        vm.publicPlaylists = [];


        if(vm.personalProfile){
            meanData.getLikedPlaylists()
                .error(function (error) {
                    console.error(error);
                })
                .then(function (data){
                    vm.likedPlaylists = data.data;
                })
        } else{
            meanData.getUserPlaylists(id)
                .error(function (error){
                    console.error(error)
                })
                .then(function (data){
                    vm.publicPlaylists = data.data;
                })
        }
    }

})();

(function() {

    angular
        .module('meanApp')
        .controller('topPlaylistsCtrl', topPlaylistsCtrl);

    function topPlaylistsCtrl () {

    }

})();
(function () {

    angular
        .module('meanApp')
        .directive('fileModel', ['$parse', function ($parse) {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    var model = $parse(attrs.fileModel);
                    var modelSetter = model.assign;

                    var onChangeFunc = function(){
                        console.log("ça m'en touche une");
                        scope.$apply(function () {
                            modelSetter(scope, element[0].files[0]);
                        })
                    }

                    element.bind('change', onChangeFunc);
                }
            };
        }])
})();


(function () {

  angular
  .module('meanApp')
  .controller('loginCtrl', loginCtrl);

  loginCtrl.$inject = ['$location', 'authentication'];
  function loginCtrl($location, authentication) {
    var vm = this;

    vm.credentials = {
      email : "",
      password : ""
    };

    vm.onSubmit = function () {
      authentication
        .login(vm.credentials)
        .error(function(err){
          alert(err);
        })
        .then(function(){
          $location.path('profile');
        });
    };

  }

})();
(function () {

    angular
        .module('meanApp')
        .service('authentication', authentication);

    authentication.$inject = ['$http', '$window', 'multipartForm'];
    function authentication($http, $window, multipartForm) {
        var saveToken = function (token) {
            $window.localStorage['mean-token'] = token;
        };

        var getToken = function () {
            return $window.localStorage['mean-token'];
        };


        var isLoggedIn = function () {
            var token = getToken();
            var payload;

            if (token) {
                payload = token.split('.')[1];
                payload = $window.atob(payload);
                payload = JSON.parse(payload);

                return payload.exp > Date.now() / 1000;
            } else {
                return false;
            }
        };
        var currentUser = function () {
            if (isLoggedIn()) {
                var token = getToken();
                var payload = token.split('.')[1];
                payload = $window.atob(payload);
                payload = JSON.parse(payload);
                return {
                    email: payload.email,
                    name: payload.name,
                    _id: payload._id
                };
            }
        };

        var register = function (user, callback) {
            var uploadUrl = '/api/register';
            multipartForm.post(uploadUrl, user, function (response) {
                if (response.status === 200) {
                    saveToken(response.data.token);
                }
                callback(response);
            });
        };

        login = function (user) {
            return $http.post('/api/login', user).success(function (data) {
                saveToken(data.token);
            });
        };

        logout = function () {
            $window.localStorage.removeItem('mean-token');
        };

        return {
            currentUser: currentUser,
            saveToken: saveToken,
            getToken: getToken,
            isLoggedIn: isLoggedIn,
            register: register,
            login: login,
            logout: logout
        };
    }
})();
(function () {

    angular
        .module('meanApp')
        .service('meanData', meanData);

    meanData.$inject = ['$http', 'authentication'];
    function meanData($http, authentication) {
        /*Profile */
        var getProfile = function (userID) {
            return $http.get('/api/profile/' + userID, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        /*Playlists*/
        var getMyPlaylists = function () {
            var currentUserId = authentication.currentUser()._id;
            return getUserPlaylists(currentUserId);
        };

        var getUserPlaylists = function (userID) {
            return $http.get('/api/userPlaylists/' + userID, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var createPlaylist = function (newPlaylist) {
            return $http.post('/api/playlist',
                {
                    playlist: newPlaylist
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                });
        };

        var editPlaylist = function (playlist) {
            return $http.put('/api/playlist',
                {
                    playlist: playlist
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                });
        };

        var deletePlaylist = function (playlist) {
            return $http.delete('/api/playlist/' + playlist.ID,
                {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                });
        };

        var getPlaylist = function (playlistId) {
            return $http.get('/api/playlist/' + playlistId, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var getLikedPlaylists = function () {
            return $http.get('/api/likes', {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            })
        };

        var getPlaylistLikes = function (playlistID) {
            return $http.get('/api/likes/' + playlistID, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            })
        };

        var getTopPlaylist = function () {
            return $http.get('/api/topPlaylists');
        };

        /*Likes*/
        var likePlaylist = function (playlistID) {
            return $http.post('/api/likes',
                {
                    playlistID: playlistID
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                });
        };

        var unlikePlaylist = function (playlistID) {
            return $http.delete('/api/likes/' + playlistID, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        /*Comments*/
        var commentPlaylist = function (playlistID, comment) {
            return $http.post('/api/comments/',
                {
                    playlistID: playlistID,
                    comment: comment
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                });
        };

        var getComments = function (playlistID) {
            return $http.get('/api/comments/' + playlistID, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var getYoutubeResults = function (research) {
            return $http.get('/api/youtubeResults/' + research, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var getSoundcloudResults = function (research) {
            /*var client_id = 'b23455855ab96a4556cbd0a98397ae8c';
             return $http.get('https://api.soundcloud.com/tracks/?q='+research+'&client_id='+client_id);*/
            return $http.get('/api/soundcloudResults/' + research, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var getSoundcloudTrack = function (trackID) {
            return $http.get('/api/soundcloudSong/' + trackID, {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };


        return {
            getProfile: getProfile,
            getMyPlaylists: getMyPlaylists,
            getUserPlaylists: getUserPlaylists,
            createPlaylist: createPlaylist,
            editPlaylist: editPlaylist,
            deletePlaylist: deletePlaylist,
            getPlaylist: getPlaylist,
            getLikedPlaylists: getLikedPlaylists,
            getPlaylistLikes: getPlaylistLikes,
            getTopPlaylists: getTopPlaylist,
            likePlaylist: likePlaylist,
            unlikePlaylist: unlikePlaylist,
            commentPlaylist: commentPlaylist,
            getComments: getComments,
            getYoutubeResults: getYoutubeResults,
            getSoundcloudResults: getSoundcloudResults,
            getSoundcloudTrack: getSoundcloudTrack
        };
    }

})();
(function () {

    angular
        .module('meanApp')
        .service('multipartForm', multipartForm);

    multipartForm.$inject = ['$http'];
    function multipartForm($http) {
        this.post = function(uploadUrl, data, callback){
            var fd = new FormData();
            for(var key in data){
                fd.append(key, data[key]);
            }

            $http.post(uploadUrl, fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            }).then(
                function(response){
                   callback(response);
                },
                function(response){
                    callback(response);
                }
            );
        }

    }

})();
(function () {

    angular
        .module('meanApp')
        .service('playlistService', playlist);

    playlist.$inject = ['$rootScope'];
    function playlist($rootScope) {
        var currentPlaylist;

        var setPlaylist = function(playlist){
            currentPlaylist = playlist;
            $rootScope.$broadcast('playlistChanged', {
                data: playlist
            });
        };

        var getPlaylist = function(){
            return currentPlaylist;
        };

        return{
            getPlaylist : getPlaylist,
            setPlaylist : setPlaylist
        }
    }
})();
(function () {

    angular
        .module('meanApp')
        .controller('logoutCtrl', logoutCtrl);

    logoutCtrl.$inject = ['$location', 'authentication'];
    function logoutCtrl($location, authentication) {
        var vm = this;

        authentication.logout();
        $location.path('/');
    }

})();
(function () {

  angular
    .module('meanApp')
    .controller('registerCtrl', registerCtrl);

  registerCtrl.$inject = ['$location', 'authentication'];
  function registerCtrl($location, authentication) {
    var vm = this;

    vm.credentials = {
      name : "",
      email : "",
      password : ""
    };

    vm.onSubmit = function () {
      authentication.register(vm.credentials, function (response) {
          if(response.status === 200){
              $location.path('profile');
          } else{
              alert(err);
          }
      })
    };
  }

})();
(function () {

    angular
        .module('meanApp')
        .controller('footCtrl', footCtrl);

    function footCtrl() {

    }

})();
(function () {

    angular
        .module('meanApp')
        .directive('foot', foot);

    function foot () {
        return {
            restrict: 'EA',
            templateUrl: '/common/directives/foot/footer.template.html',
            controller: 'footCtrl as footervm'
        };
    }

})();
(function () {

    angular
        .module('meanApp')
        .controller('navigationCtrl', navigationCtrl);

    navigationCtrl.$inject = ['authentication'];
    function navigationCtrl(authentication) {
        var vm = this;

        vm.isLoggedIn = authentication.isLoggedIn();

        vm.currentUser = authentication.currentUser();
    }

})();
(function () {

  angular
    .module('meanApp')
    .directive('navigation', navigation);

  function navigation () {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/navigation/navigation.template.html',
      controller: 'navigationCtrl as navvm'
    };
  }

})();
(function () {

    angular
        .module('meanApp')
        .constant('YT_event',{
            STOP:            0,
            PLAY:            1,
            PAUSE:           2,
            STATUS_CHANGE:   3,
            LOADED :         4
        } );

})();

(function () {

    angular
        .module('meanApp')
        .constant('SC_event',{
            STOP:            5,
            PLAY:            6,
            PAUSE:           7,
            STATUS_CHANGE:   8,
            LOADED:          9
        } );

})();
(function () {
    angular
        .module('meanApp')
        .controller('playerCtrl', playerCtrl);

    playerCtrl.$inject = ['$scope', 'YT_event', 'SC_event', '$window'];
    function playerCtrl($scope, YT_event, SC_event, $window) {
        var index = 0;
        var time_update_interval;
        $scope.currentPlaylist = [];
        var playingFrom = "";
        var playing = true;
        $scope.yt = {
            title: "",
            link: "",
            artwork: ""
        };

        $scope.YT_event = YT_event;

        $scope.sendControlEvent = function () {
            playing = !playing;
            if(playing){
                if(playingFrom == "YT"){
                    this.$broadcast(YT_event.PLAY);
                }
                if(playingFrom == "SC"){
                    this.$broadcast(SC_event.PLAY);
                }
            }else{
                if(playingFrom == "YT"){
                    this.$broadcast(YT_event.PAUSE);
                }
                if(playingFrom == "SC"){
                    this.$broadcast(SC_event.PAUSE);
                }
            }
        };

        $scope.nextSong = function(){
            if (index + 1 < $scope.currentPlaylist.length) {
                index++;
                var song = $scope.currentPlaylist[index];
                if (song.from == "Youtube") {
                    $scope.scid ="";
                    $scope.videoid = song.id;
                    $scope.$broadcast(YT_event.PLAY);
                    playingFrom = "YT";
                } else if (song.from == "Soundcloud") {
                    $scope.videoid="";
                    $scope.scid = song.id;;
                    playingFrom = "SC";
                }
                $scope.$broadcast("UPDATE", $scope.scid);
                $scope.yt.title = song.title;
                $scope.yt.link = song.link;
                $scope.yt.artwork = song.artwork;
            }
        };

        $scope.prevSong = function () {
            if(index > 0){
                index -= 2;
                $scope.nextSong();
            }

        };

        $scope.$on(YT_event.STATUS_CHANGE, function (event, data) {
            clearInterval(time_update_interval);
            if (data == 'ENDED') {
                $scope.nextSong();
            }
            if( data=='PLAYING'){
                var player = $scope.player;
                time_update_interval = setInterval(function () {
                    $scope.$apply(function () {
                        var elapsedMin = parseInt((player.getCurrentTime()/60), 10);
                        var elapsedSec = parseInt((player.getCurrentTime()%60), 10);
                        var totalMin = parseInt((player.getDuration()/60), 10);
                        var totalSec = parseInt((player.getDuration()%60), 10);
                        $scope.timePlayed = elapsedMin + ":" + elapsedSec+ "/" + totalMin+ ":" + totalSec ;
                    })
                }, 1000)
            }
        });

        $scope.$on(SC_event.LOADED, function (event, data) {
            var song = data;
            song.ontimeupdate = function () {
                $scope.$apply(function () {
                    var elapsedMin = parseInt((song.currentTime/60), 10);
                    var elapsedSec = parseInt((song.currentTime%60), 10);
                    var totalMin = parseInt((song.duration/60), 10);
                    var totalSec = parseInt((song.duration%60), 10);
                    $scope.timePlayed = elapsedMin + ":" + elapsedSec+ "/" + totalMin+ ":" + totalSec ;
                })
            }
        });

        $scope.$on('playlistChanged', function (event, data) {
            $scope.currentPlaylist = data.data.JsonPlaylist.songs;
            if(playingFrom == "YT"){
                $scope.$broadcast(YT_event.STOP);
            }
            if(playingFrom == "SC"){
                $scope.$broadcast(SC_event.STOP);
            }
            index = -1;
            $scope.nextSong();
        })
    }
})();

(function () {

    angular
        .module('meanApp')
        .directive('player', player);

    player.$inject = ['$window', 'YT_event', 'SC_event', '$http', 'meanData']

    function player($window, YT_event, SC_event, $http, meanData) {

        return {
            restrict: "E",

            scope: {
                height: "@",
                width: "@",
                videoid: "@",
                scid: "@"
            },
            controller: "playerCtrl as yt",

            templateUrl: "/common/directives/player/player.html",

            link: function (scope, element, attrs, $rootScope) {
                /***********YOUTUBE*************/
                var tagYT = document.createElement('script');
                tagYT.src = "https://www.youtube.com/iframe_api";
                var firstScriptTag = document.getElementsByTagName('script')[0];
                firstScriptTag.parentNode.insertBefore(tagYT, firstScriptTag);

                scope.player;

                $window.onYouTubeIframeAPIReady = function () {

                    scope.player = new YT.Player(element.children()[0], {
                        playerVars: {
                            autoplay: 1,
                            html5: 1,
                            theme: "light",
                            modesbranding: 0,
                            color: "white",
                            iv_load_policy: 3,
                            showinfo: 0,
                            controls: 0
                        },

                        height: scope.height,
                        width: scope.width,
                        videoId: scope.videoid,
                        volume: 100,

                        events: {
                            'onStateChange': function (event) {

                                var message = {
                                    event: YT_event.STATUS_CHANGE,
                                    data: ""
                                };

                                switch (event.data) {
                                    case YT.PlayerState.PLAYING:
                                        message.data = "PLAYING";
                                        break;
                                    case YT.PlayerState.ENDED:
                                        message.data = "ENDED";
                                        scope.player.clearVideo();
                                        break;
                                    case YT.PlayerState.UNSTARTED:
                                        message.data = "UNSTARTED";
                                        break;
                                    case YT.PlayerState.PAUSED:
                                        message.data = "PAUSED";
                                        break;
                                }

                                scope.$apply(function () {
                                    scope.$emit(message.event, message.data);
                                });
                            }
                        }

                    });
                };


                /**************SoundCloud******************/
                var clientid = 'b23455855ab96a4556cbd0a98397ae8c';

                var loadSoundcloud = function () {
                    if (scope.scid != "") {
                        meanData.getSoundcloudTrack(scope.scid)
                            .error(function () {
                                //todo
                            })
                            .success(function (jsonData) {
                                var data = JSON.parse(jsonData);
                                scope.band = data.user.username;
                                scope.bandUrl = data.user.permalink_url;
                                scope.title = data.title;
                                scope.trackUrl = data.permalink_url;
                                scope.albumArt = data.artwork_url.replace("large", "t500x500");
                                scope.wave = data.waveform_url;
                                scope.stream = data.stream_url + '?client_id=' + clientid;
                                scope.song = new Audio();

                                scope.song.onended = function () {
                                    scope.band = "";
                                    scope.title = "";
                                    scope.$emit(YT_event.STATUS_CHANGE, "ENDED");
                                };

                                scope.playing = false;
                                scope.play = function () {
                                    if (scope.song.src == '') {
                                        scope.song.src = scope.stream;
                                    }
                                    scope.song.play();
                                };
                                scope.play();
                                scope.$emit(SC_event.LOADED, scope.song);
                            });
                    }

                };
                /***************Watchers*********************/
                scope.$watch('videoid', function (newValue, oldValue) {
                    if (newValue == oldValue) {
                        return;
                    }
                    if (scope.videoid != "") {
                        scope.player.cueVideoById(scope.videoid);
                        scope.player.playVideo();
                    }
                    else {
                        scope.player.seekTo(0);
                        scope.player.stopVideo();
                    }
                });

                scope.$on('UPDATE', function (data, id) {
                    if(scope.song){
                        scope.song.pause();
                        scope.song.currentTime = 0;
                    }
                    if (scope.scid != "") {
                        loadSoundcloud();
                    }
                });

                scope.$on(YT_event.PLAY, function () {
                    scope.player.playVideo();
                });

                scope.$on(YT_event.PAUSE, function () {
                    scope.player.pauseVideo();
                });

                scope.$on(YT_event.STOP, function () {
                    scope.player.stopVideo();
                });

                scope.$on(SC_event.PLAY, function () {
                    scope.song.play();
                    if (scope.player) {
                        scope.player.pauseVideo();
                    }
                });

                scope.$on(SC_event.PAUSE, function () {
                    scope.song.pause();
                });

                scope.$on(SC_event.STOP, function () {
                    scope.song.pause();
                });

            }
        };
    }
})();


(function () {

    angular
        .module('meanApp')
        .directive('topplaylists', topPlaylists);

    function topPlaylists () {
        return {
            restrict: 'EA',
            scope: {
                limitrows: '='
            },
            templateUrl: '/common/directives/topPlaylists/topPlaylists.template.html',
            controller: 'topPlaylistsTemplateCtrl as topPlaylistsVm'
        };
    }

})();
(function () {

    angular
        .module('meanApp')
        .controller('topPlaylistsTemplateCtrl', topPlaylistsTemplateCtrl);

    topPlaylistsTemplateCtrl.$inject = ['meanData', '$scope'];
    function topPlaylistsTemplateCtrl(meanData, $scope) {
        vm = this;
        vm.TopPlaylists = {};
        vm.Separator = [];
        vm.limitrows = $scope.limitrows;
        meanData.getTopPlaylists()
            .error(function (error) {
                alert(error);
            })
            .then(function (data) {
                vm.TopPlaylists = data.data;
                while (vm.TopPlaylists.length) {
                    vm.Separator.push(vm.TopPlaylists.splice(0, 2));
                }
            })
    }
})();
//# sourceMappingURL=app.min.js.map
