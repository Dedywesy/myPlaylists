(function () {

    angular.module('meanApp', ['ngRoute']);

    function config($routeProvider, $locationProvider) {
        $routeProvider
            .when('/', {
                templateUrl: 'home/home.view.html',
                controller: 'homeCtrl',
                controllerAs: 'vm'
            })
            .when('/register', {
                templateUrl: '/auth/register/register.view.html',
                controller: 'registerCtrl',
                controllerAs: 'vm'
            })
            .when('/login', {
                templateUrl: '/auth/login/login.view.html',
                controller: 'loginCtrl',
                controllerAs: 'vm'
            })
            .when('/profile', {
                templateUrl: '/profile/profile.view.html',
                controller: 'profileCtrl',
                controllerAs: 'vm'
            })
            .when('/contact', {
                templateUrl: '/contact/contact.view.html',
                controller: 'contactCtrl',
                controllerAs: 'vm'
            })
            .when('/topPlaylists', {
                templateUrl: '/topPlaylists/topPlaylists.view.html',
                controller: 'topPlaylistsCtrl',
                controllerAs: 'vm'
            })
            .when('/myPlaylists', {
                templateUrl: '/myPlaylists/myPlaylists.view.html',
                controller: 'myPlaylistsCtrl',
                controllerAs: 'vm'
            })
            .when('/logout',
            {
                templateUrl: '/home/home.view.html',
                controller: 'logoutCtrl',
                controllerAs: 'vm'
            })
            .otherwise({redirectTo: '/'});

        // use the HTML5 History API
        $locationProvider.html5Mode(true);
    }

    function run($rootScope, $location, authentication) {
        $rootScope.$on('$routeChangeStart', function (event, nextRoute, currentRoute) {
            if ($location.path() === '/profile' && !authentication.isLoggedIn()) {
                $location.path('/login');
            }
            if ($location.path() === '/myPlaylists' && !authentication.isLoggedIn()) {
                $location.path('/login');
            }
        });
    }

    angular
        .module('meanApp')
        .config(['$routeProvider', '$locationProvider', config])
        .run(['$rootScope', '$location', 'authentication', run]);

})();
(function() {
    angular
        .module('meanApp')
        .controller('contactCtrl', contactCtrl);

    function contactCtrl () {

    }

})();
(function () {

    angular
        .module('meanApp')
        .controller('profileCtrl', profileCtrl);

    profileCtrl.$inject = ['meanData'];
    function profileCtrl(meanData) {
        var vm = this;
        vm.user = {};
        meanData.getProfile()
            .success(function (data) {
                vm.user = data;
            })
            .error(function (e) {
                console.log(e);
            });
    }

})();

(function() {
  
  angular
    .module('meanApp')
    .controller('homeCtrl', homeCtrl);

    function homeCtrl () {

    }

})();
(function () {

    angular
        .module('meanApp')
        .controller('myPlaylistsCtrl', myPlaylistsCtrl);

    myPlaylistsCtrl.$inject = ['meanData'];
    function myPlaylistsCtrl(meanData) {
        var vm = this;

        vm.playlists = {};
        vm.newPlaylist = {
            name: "",
            description: "",
            isPublic: true
        }
        meanData.getMyPlaylists()
            .success(function (data) {
                vm.playlists = data;
            })
            .error(function (error) {
                console.error(error);
            });

        vm.addPlaylist = function () {
            console.log("creating playlist. Name : ", vm.newPlaylist.name);
            meanData.createPlaylist(vm.newPlaylist)
                .error(function (err) {
                    alert("Error while adding playlist", err);
                })
                .then(function (data) {
                    console.log(data);

                    vm.playlists.push(data.data);
                    vm.newPlaylist.name = "";
                    vm.newPlaylist.description = "";
                });
        };

        vm.edit = function (playlist) {
            console.log("Edit", playlist); //TODO
        };

        vm.play = function (playlist) {
            console.log("Play", playlist); //TODO
        }
    }

})();
(function() {

    angular
        .module('meanApp')
        .controller('topPlaylistsCtrl', topPlaylistsCtrl);

    function topPlaylistsCtrl () {

    }

})();
(function () {

  angular
    .module('meanApp')
    .controller('registerCtrl', registerCtrl);

  registerCtrl.$inject = ['$location', 'authentication'];
  function registerCtrl($location, authentication) {
    var vm = this;

    vm.credentials = {
      name : "",
      email : "",
      password : ""
    };

    vm.onSubmit = function () {
      authentication.register(vm.credentials, function (response) {
          if(response.status === 200){
              $location.path('profile');
          } else{
              alert(err);
          }
      })
    };
  }

})();
(function () {

  angular
  .module('meanApp')
  .controller('loginCtrl', loginCtrl);

  loginCtrl.$inject = ['$location', 'authentication'];
  function loginCtrl($location, authentication) {
    var vm = this;

    vm.credentials = {
      email : "",
      password : ""
    };

    vm.onSubmit = function () {
      authentication
        .login(vm.credentials)
        .error(function(err){
          alert(err);
        })
        .then(function(){
          $location.path('profile');
        });
    };

  }

})();
(function () {

    angular
        .module('meanApp')
        .controller('logoutCtrl', logoutCtrl);

    logoutCtrl.$inject = ['$location', 'authentication'];
    function logoutCtrl($location, authentication) {
        var vm = this;

        authentication.logout();
        $location.path('/');
    }

})();
(function () {

    angular
        .module('meanApp')
        .directive('fileModel', ['$parse', function ($parse) {
            return {
                restrict: 'A',
                link: function (scope, element, attrs) {
                    var model = $parse(attrs.fileModel);
                    var modelSetter = model.assign;

                    var onChangeFunc = function(){
                        console.log("Ã§a m'en touche une");
                        scope.$apply(function () {
                            modelSetter(scope, element[0].files[0]);
                        })
                    }

                    element.bind('change', onChangeFunc);
                }
            };
        }])
})();


(function () {

    angular
        .module('meanApp')
        .service('authentication', authentication);

    authentication.$inject = ['$http', '$window', 'multipartForm'];
    function authentication($http, $window, multipartForm) {
        var saveToken = function (token) {
            $window.localStorage['mean-token'] = token;
        };

        var getToken = function () {
            return $window.localStorage['mean-token'];
        };


        var isLoggedIn = function () {
            var token = getToken();
            var payload;

            if (token) {
                payload = token.split('.')[1];
                payload = $window.atob(payload);
                payload = JSON.parse(payload);

                return payload.exp > Date.now() / 1000;
            } else {
                return false;
            }
        };
        var currentUser = function () {
            if (isLoggedIn()) {
                var token = getToken();
                var payload = token.split('.')[1];
                payload = $window.atob(payload);
                payload = JSON.parse(payload);
                return {
                    email: payload.email,
                    name: payload.name,
                    _id: payload._id
                };
            }
        };

        var register = function (user, callback) {
            var uploadUrl = '/api/register';
            multipartForm.post(uploadUrl, user, function (response) {
                if (response.status === 200) {
                    saveToken(response.data.token);
                }
                callback(response);
            });
        };

        login = function (user) {
            return $http.post('/api/login', user).success(function (data) {
                saveToken(data.token);
            });
        };

        logout = function () {
            $window.localStorage.removeItem('mean-token');
        };

        return {
            currentUser: currentUser,
            saveToken: saveToken,
            getToken: getToken,
            isLoggedIn: isLoggedIn,
            register: register,
            login: login,
            logout: logout
        };
    }
})();
(function () {

    angular
        .module('meanApp')
        .service('meanData', meanData);

    meanData.$inject = ['$http', 'authentication'];
    function meanData($http, authentication) {

        var getProfile = function () {
            return $http.get('/api/profile', {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken()
                }
            });
        };

        var getMyPlaylists = function () {
            var currentUserId = authentication.currentUser()._id;
            return getPlaylists(currentUserId);
        };

        var getPlaylists = function (userID){
            return $http.get('/api/getPlaylists', {
                headers: {
                    Authorization: 'Bearer ' + authentication.getToken(),
                    touserid: userID
                }
            }) ;
        };

        var createPlaylist = function (newPlaylist) {
            return $http.post('/api/newPlaylist',
                {
                    playlist: newPlaylist
                },
                {
                    headers: {
                        Authorization: 'Bearer ' + authentication.getToken()
                    }
                });
        };



        return {
            getProfile: getProfile,
            getMyPlaylists: getMyPlaylists,
            createPlaylist: createPlaylist
        };
    }

})();
(function () {

    angular
        .module('meanApp')
        .service('multipartForm', multipartForm);

    multipartForm.$inject = ['$http'];
    function multipartForm($http) {
        this.post = function(uploadUrl, data, callback){
            var fd = new FormData();
            for(var key in data){
                fd.append(key, data[key]);
            }

            $http.post(uploadUrl, fd, {
                transformRequest: angular.identity,
                headers: {'Content-Type': undefined}
            }).then(
                function(response){
                   callback(response);
                },
                function(response){
                    callback(response);
                }
            );
        }

    }

})();
(function () {

    angular
        .module('meanApp')
        .controller('footCtrl', footCtrl);

    function footCtrl() {

    }

})();
(function () {

    angular
        .module('meanApp')
        .directive('foot', foot);

    function foot () {
        return {
            restrict: 'EA',
            templateUrl: '/common/directives/foot/footer.template.html',
            controller: 'footCtrl as footervm'
        };
    }

})();
(function () {

    angular
        .module('meanApp')
        .controller('navigationCtrl', navigationCtrl);

    navigationCtrl.$inject = ['$location', 'authentication'];
    function navigationCtrl($location, authentication) {
        var vm = this;

        vm.isLoggedIn = authentication.isLoggedIn();

        vm.currentUser = authentication.currentUser();

        vm.logout = function () {
            alert('maitre gims');
            /*authentication.logout();
            $location.path('/');*/
        }

    }

})();
(function () {

  angular
    .module('meanApp')
    .directive('navigation', navigation);

  function navigation () {
    return {
      restrict: 'EA',
      templateUrl: '/common/directives/navigation/navigation.template.html',
      controller: 'navigationCtrl as navvm'
    };
  }

})();
//# sourceMappingURL=app.min.js.map
